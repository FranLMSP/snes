use crate::cpu::bus::Bus;
use crate::cpu::registers::Registers;

pub mod adc;
pub mod and;
pub mod asl;
pub mod bcc;
pub mod bcs;
pub mod beq;
pub mod bne;
pub mod bmi;
pub mod bpl;
pub mod bra;
pub mod brk;
pub mod brl;
pub mod bvc;
pub mod bvs;
pub mod bit;
pub mod clc;
pub mod cld;
pub mod cli;
pub mod clv;
pub mod cmp;
pub mod cop;
pub mod cpx;
pub mod cpy;
pub mod dec;
pub mod dex;
pub mod dey;
pub mod eor;
pub mod inc;
pub mod inx;
pub mod iny;
pub mod jmp;
pub mod jsr;
pub mod lda;
pub mod ldx;
pub mod ldy;
pub mod lsr;
pub mod mvn;
pub mod mvp;
pub mod nop;
pub mod ora;
pub mod pea;
pub mod pei;
pub mod per;
pub mod pha;
pub mod phb;
pub mod phd;
pub mod phk;
pub mod php;
pub mod phx;
pub mod phy;
pub mod pla;
pub mod plb;
pub mod pld;
pub mod plp;
pub mod plx;
pub mod ply;
pub mod rep;
pub mod rol;
pub mod ror;
pub mod rti;
pub mod rtl;
pub mod rts;
pub mod sbc;
pub mod sec;
pub mod sed;
pub mod sei;
pub mod sep;
pub mod sta;
pub mod stx;
pub mod sty;
pub mod stp;
pub mod stz;
pub mod tax;
pub mod tay;
pub mod tcd;
pub mod tcs;
pub mod tdc;
pub mod trb;
pub mod tsb;
pub mod tsc;
pub mod tsx;
pub mod txa;
pub mod txs;
pub mod txy;
pub mod tya;
pub mod tyx;
pub mod wai;
pub mod wdm;
pub mod xba;
pub mod xce;
pub mod bit_common;
pub mod dec_common;
pub mod decoder_common;
pub mod branch_common;
pub mod push_common;
pub mod pull_common;
pub mod comp_common;
pub mod move_common;
pub mod read_write_common;
pub mod mapper;

pub trait CPUInstruction {
    fn execute(&self, registers: &mut Registers, bus: &mut Bus);
    fn mnemonic(&self, registers: &Registers, bus: &Bus, opcode: u8) -> String;
}
